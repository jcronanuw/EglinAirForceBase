#    {
#      loopF.NewStand <- c(loopF.NewStand,neef)
#      l.neef <- rep(1,length(v.neef))
#      s.neef_a <- summarize(l.neef, v.neef, sum)
#      s.neef <- as.vector(s.neef_a[,2])
#      loopF.Area <- c(loopF.Area, s.neef)
#    }
#loopF.ReplacedStand <- c(loopF.ReplacedStand, osno)
#loopF.E_no <- c(loopF.E_no, rep(e, length(osno)))
#loopF.F_no <- c(loopF.F_no, rep(f, length(osno)))
#loopF.G_H_no <- c(loopF.G_H_no, rep(g, length(osno)))
#g.g <- sum(g.g, ifelse(g == 0,h,g))#tracks expansions
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
#if(length(unique(loopF.NewStand)) != length(loopF.NewStand) |
#     length(loopF.ReplacedStand) != length(loopF.NewStand))
#{
#  r101 <- 8
#} else
#{
#  r101 <- ifelse(any(s.map < 0 & s.map > -9999),88,0)
#}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
#if(length(s.map[s.map < 0 & s.map > -9999]) > 0)
#{
#  aaa <- data.frame(B = loopB.new_stand, F = loopF.NewStand)
#} else
#{
#  f <- f
#}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
break
} #9.3.2 ---------------------------------------------------------------------------
} else #9.1.1 ----------------------------------------------------------------------
{ #9.1.2 ---------------------------------------------------------------------------
break
} #9.1.2 ---------------------------------------------------------------------------
##############################################################################
##############################################################################
##############################################################################
} #9.0.0 ---------------------------------------------------------------------------
#Log new stand numbers and associated disturbances when they have been added to
#s.map.
loopE.NewStand <- c(loopE.NewStand,loopF.NewStand)
loopE.Area <- c(loopE.Area,loopF.Area)
loopE.ReplacedStand <- c(loopE.ReplacedStand,loopF.ReplacedStand)
loopE.E_no <- c(loopE.E_no, loopF.E_no)
loopE.F_no <- c(loopE.F_no, loopF.F_no)
loopE.G_H_no <- c(loopE.G_H_no, loopF.G_H_no)
loopE.fireType <- c(loopE.fireType, loopF.fireType)
loopE <- data.frame(NewStand = loopE.NewStand,
ReplacedStand = loopE.ReplacedStand,
Area = loopE.Area,
Fire = loopE.fireType,
E_no = loopE.E_no,
F_no = loopE.F_no,
G_H_no = loopE.G_H_no)
loopE <- loopE[order(loopE$ReplacedStand),]
} else #8.1.1 ----------------------------------------------------------------------
{ #8.1.2 ---------------------------------------------------------------------------
#Log new stand numbers and associated disturbance when they have been added to
#s.map.
loopE.NewStand <- c(loopE.NewStand,loopF.NewStand)
loopE.Area <- c(loopE.Area,loopF.Area)
loopE.ReplacedStand <- c(loopE.ReplacedStand,loopF.ReplacedStand)
loopE.E_no <- c(loopE.E_no, loopF.E_no)
loopE.F_no <- c(loopE.F_no, loopF.F_no)
loopE.G_H_no <- c(loopE.G_H_no, loopF.G_H_no)
loopE.fireType <- c(loopE.fireType, loopF.fireType)
loopE <- data.frame(NewStand = loopE.NewStand,
ReplacedStand = loopE.ReplacedStand,
Area = loopE.Area,
Fire = loopE.fireType,
E_no = loopE.E_no,
F_no = loopE.F_no,
G_H_no = loopE.G_H_no)
loopE <- loopE[order(loopE$ReplacedStand),]
break.message <- "No Flammable Fuel"
} #8.1.2 ---------------------------------------------------------------------------
#Print out run status
run_status(row.code, t.code, a, b, cc, e, f, tdn, tdy, tdc)
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                  #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                 #
if(r101 > 0)                                                                 #
{                                                                            #
r101 <- r101
break
} else                                                                       #
{                                                                            #
r101 <- r101
}                                                                            #
#                                                                            #
} #8.0.0 ------------------------------------------------------------------#
}                                                                            #
#
if(r101 > 0)                                                                 #
{                                                                            #
r101 <- r101
break
} else                                                                       #
{                                                                            #
r101 <- r101
}                                                                            #
##############################################################################
##############################################################################
##############################################################################
#Post-wildfire processing >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Update files if there were disturbances in year[a].
if(length(loopE.NewStand) > 0)
{
#Update files based on time-since-last-treatment>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Show max time-since-last-treatment before state transitions for each fuelbed
max_tslt <- fuelbed_lut$max_tslt[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#List each of the fuelbeds corresponding with tslt object above
max_tslt_fb <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#Expand to the max tslt object for each row in tslt.List
max_tslt_x_stand <- max_tslt[match(tslt.Fuelbeds, max_tslt_fb)]
#Crash model is Fuelbed.List turned into a list()
if(length(max_tslt_x_stand) != length(tslt.List))
{
r101 <- "inconcistency in tslt tracking"
break
} else
{
r101 <- r101
}
#List stand numbers for stands that will transition.
replace_stands <- tslt.Stands[tslt.List > max_tslt_x_stand]
#List fuelbeds of stands that will transition.
replace_fbs <- tslt.Fuelbeds[tslt.List > max_tslt_x_stand]
#List unique current fuelbeds for stands that will transition.
old_fbs <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new fuelbeds for stands that will transition.
new_fbs <- fuelbed_lut$post_1[fuelbed_lut$fuelbed %in% replace_fbs]
#Expand new unique fuelbeds to the number of stands that will transition.
new_fbs_x_stand <- new_fbs[match(replace_fbs, old_fbs)]
#Replace current fuelbeds with new ones in cases where tslt exceeds limit for
#state.
tslt.Fuelbeds[tslt.Stands %in% replace_stands] <- new_fbs_x_stand
#Order tslt objects by stand number before you apply it to .List objects
tslt.List <- tslt.List[order(tslt.Stands)]
tslt.Fuelbeds <- tslt.Fuelbeds[order(tslt.Stands)]
tslt.Stands <- sort(tslt.Stands)
#Apply changes to f.map and Fuelbed.List
vt.map <- s.map[s.map %in% tslt.Stands]
v.tslt <- tslt.Fuelbeds[match(vt.map, tslt.Stands)]
f.map[s.map %in% tslt.Stands] <- v.tslt
Fuelbed.List[Stand.List %in% tslt.Stands] <- tslt.Fuelbeds
#Remove stands that have been overwritten
tslt.List <- tslt.List[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Fuelbeds <- tslt.Fuelbeds[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Stands <- tslt.Stands[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
#Remove rows where fuelbeds no longer represent a silvicultural treatment
tslt.List <- tslt.List[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Stands <- tslt.Stands[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Fuelbeds <- tslt.Fuelbeds[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
#Code below replaces loop, vene though there are more lines it should run way faster.
loopE_crownFire <- loopE[loopE$Fire == 2,]
#Object shows fuelbeds associated with each new stand number created by
#disturbances in year[a].
FB_burned.by.crownFire_1 <- Fuelbed.List[Stand.List %in% loopE_crownFire$ReplacedStand]
SN_burned.by.crownFire_1 <- Stand.List[Stand.List %in% loopE_crownFire$ReplacedStand]
FB_burned.by.crownFire_2 <- FB_burned.by.crownFire_1[match(loopE_crownFire$ReplacedStand,
SN_burned.by.crownFire_1)]
#Add SN_burned.by.crownFire_2 to loopE_crownFire data frame
loopE_crownFire <- data.frame(loopE_crownFire, AffectedFuelbed = FB_burned.by.crownFire_2)
#Sort data frame by new stands
loopE_crownFire <- loopE_crownFire[order(loopE_crownFire$NewStand),]#probably unecessary
#seperate out new stands from s.map, lists occurrences of new stands from min to max coords.
crownFire_standsXpixel <- s.map[s.map %in% loopE_crownFire$NewStand]
#List of row numbers in fuelbed lookup table where fuelbeds need to be updated based on treatment
burned.fuelbeds.positions <- which(fuelbed_lut$fuelbed %in% loopE_crownFire$AffectedFuelbed)
#Fuelbeds that may be updated corresponding with row numbers in burned.fuelbeds.positions
fuelbeds.burned.in.crownFire <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% FB_burned.by.crownFire_2]
#row numbers in fuelbed lookup table corresponding with each existing fuelbed in each new stand
burned.fuelbed.positionsXpixel <- burned.fuelbeds.positions[match(loopE_crownFire$AffectedFuelbed,
fuelbeds.burned.in.crownFire)]
#Activate when you can differentiate between crown fire and surface fire
crownFire_regen <- fuelbed_lut$crown_fire[burned.fuelbed.positionsXpixel]
#Lists occurrences of new fuelbeds from min to max coords.
crownFire_regenXpixel <- crownFire_regen[match(crownFire_standsXpixel, loopE_crownFire$NewStand)]
#Replace old fuelbeds with new ones in f.map
f.map[s.map %in% loopE_crownFire$NewStand] <- crownFire_regenXpixel
#Re-order loopE data frame by old stands because that is the order of ages in crownFire_newAge_1.
loopE_crownFire <- loopE_crownFire[order(loopE_crownFire$ReplacedStand),]
#List ages associated with each stand that has been affected by crown fire
#These will be used to update Age.List
crownFire_oldAge_1 <- Age.List[Stand.List %in% loopE_crownFire$ReplacedStand]
crownFire_oldAge_2 <- crownFire_oldAge_1[match(loopE_crownFire$ReplacedStand, SN_burned.by.crownFire_1)]
#List new age for crown fire stands
crownFire_newAge <- rep(0, length(crownFire_oldAge_2))
#Add crownFire_newAge_2 to loopE data.frame
loopE_crownFire <- data.frame(loopE_crownFire, oldAge = crownFire_oldAge_2)
#Add crownFire_regen to loopE data.frame
loopE_crownFire <- data.frame(loopE_crownFire, newFuelbed = crownFire_regen)
#Add crownFire_newAge_2 to loopE data.frame
loopE_crownFire <- data.frame(loopE_crownFire, newAge = crownFire_newAge)
#Re-order loopE data frame by new stands.
loopE_crownFire <- loopE_crownFire[order(loopE_crownFire$NewStand),]
#List stands that have been altered by disturbances.
ss2 <- loopE.ReplacedStand
standd <- sort(unique(ss2))#there can be duplicates, this will mess up the shortcut in a9
sb <- summarize(loopE.Area,ss2,sum)#sum areas for duplicates.
saread <- as.vector(sb[,2])
smud <- mapply(function(y) MU.List[Stand.List == y], loopE.ReplacedStand)
#Isolate stands affected by surface fire
loopE_surfaceFire <- loopE[loopE$Fire == 1,]
loopE_surfaceFire <- loopE_surfaceFire[order(loopE_surfaceFire$NewStand),]#probably unecessary
#Add fuelbed and age info (needed to update .List objects)
StandNumber_surfaceFire_1 <- Stand.List[Stand.List %in% loopE_surfaceFire$ReplacedStand]
Fuelbed_surfaceFire_1 <- Fuelbed.List[Stand.List %in% loopE_surfaceFire$ReplacedStand]
Fuelbed_surfaceFire_2 <- Fuelbed_surfaceFire_1[match(loopE_surfaceFire$ReplacedStand,
StandNumber_surfaceFire_1)]
Age_surfaceFire_1 <- Age.List[Stand.List %in% loopE_surfaceFire$ReplacedStand]
Age_surfaceFire_2 <- Age_surfaceFire_1[match(loopE_surfaceFire$ReplacedStand,
StandNumber_surfaceFire_1)]
#Create new data frame. At this point new fuelbeds and new ages are old, these are
#just placeholders until further down this loop when surface fire impacts are assessed
#using mFRI.
loopE_surfaceFire <- data.frame(loopE_surfaceFire,
AffectedFuelbed = Fuelbed_surfaceFire_2,
oldAge = Age_surfaceFire_2, newFuelbed = Fuelbed_surfaceFire_2,
newAge = Age_surfaceFire_2)
#Combine surface fire and crown fire tables
loopE_allFire <- rbind(loopE_surfaceFire, loopE_crownFire)
loopE_allFire <- loopE_allFire[order(loopE_allFire$NewStand),]
#Shelve fire history for stands that have been impacted by disturbance
new_mfri_vec <- mapply(function(y) mfri.Matrix[Stand.List == y,], loopE_allFire$ReplacedStand)
nmvd <- t(new_mfri_vec)
#Add a fire for stands that were burned in wildfires
nmvd[,30] <- 1
#Change stand properties as needed for treatments.
#Create a data.frame so you can switch order from stand number to
#order in which stand was added.
#ID2.List <- 1:length(Stand.List)
#TL2 <- data.frame(ID = ID2.List, Stand = Stand.List, Area = Area.List)
#Order by stand number
#TL2 <- TL2[order(TL2$Stand),]
#Subtract area of new stands from corresponding old stands
#TL2$Area[TL2$Stand %in% standd] <- TL2$Area[TL2$Stand %in% standd] - saread
Area.List[Stand.List %in% standd] <- Area.List[Stand.List %in% standd] - saread
#Reorder by order stands were added
#TL2 <- TL2[order(TL2$ID),]
#Replace Area.List with updated object
#Area.List <- TL2$Area
#Update list to remove any stands that have been overwritten.
Stand.List <- Stand.List[(Area.List == 0) == F]
Fuelbed.List <- Fuelbed.List[(Area.List == 0) == F]
Age.List <- Age.List[(Area.List == 0) == F]
#T1E.List <- T1E.List[(Area.List == 0) == F]
#T2E.List <- T2E.List[(Area.List == 0) == F]
#D1E.List <- D1E.List[(Area.List == 0) == F]
#D2E.List <- D2E.List[(Area.List == 0) == F]
Coord.List <- Coord.List[(Area.List == 0) == F]
MU.List <- MU.List[(Area.List == 0) == F]
mfri.Matrix <- mfri.Matrix[(Area.List == 0) == F,]
mfri_lower.List <- mfri_lower.List[(Area.List == 0) == F]
mfri_upper.List <- mfri_upper.List[(Area.List == 0) == F]
Area.List <- Area.List[(Area.List == 0) == F]
#Update list to add new stands.
Stand.List <- c(Stand.List, loopE_allFire$NewStand)
Fuelbed.List <- c(Fuelbed.List, loopE_allFire$newFuelbed)
Age.List <- c(Age.List, loopE_allFire$newAge)
#List fuelbeds that need to be updated.
#pdaFB_a20 <- pda$pre[pda$pre %in% loopE_allFire$newFuelbed]
#List corresponding updated age restrictions
#pdaTH_a20 <- pda$thin[pda$pre %in% loopE_allFire$newFuelbed]
#List occurences of age restriction for each new stand
#v.THIN_a20 <- pdaTH_a20[match(loopE_allFire$newFuelbed,pdaFB_a20)]
#Update
#T1E.List <- c(T1E.List,v.THIN_a20)
#List corresponding updated age restrictions
#pdaHE_a20 <- pda$herb[pda$pre %in% loopE_allFire$newFuelbed]
#List occurences of age restriction for each new stand
#v.HERB_a20 <- pdaHE_a20[match(loopE_allFire$newFuelbed,pdaFB_a20)]
#Update
#T2E.List <- c(T2E.List, v.HERB_a20)
#List corresponding updated age restrictions
#pdaSF_a20 <- pda$sfire[pda$pre %in% loopE_allFire$newFuelbed]
#List occurences of age restriction for each new stand
#v.SFIRE_a20 <- pdaSF_a20[match(loopE_allFire$newFuelbed,pdaFB_a20)]
#Update
#D1E.List <- c(D1E.List, v.SFIRE_a20)
#List corresponding updated age restrictions
#pdaCF_a20 <- pda$cfire[pda$pre %in% loopE_allFire$newFuelbed]
#List occurences of age restriction for each new stand
#v.CFIRE_a20 <- pdaCF_a20[match(loopE_allFire$newFuelbed,pdaFB_a20)]
#Update
#D2E.List <- c(D2E.List, v.CFIRE_a20)
#List new stand occurrences in s.map
vs.map_a20 <- s.map[s.map %in% loopE.NewStand]
#List corresponding coordinates (l.map) for new stand occurrences in s.map
vl.map_a20 <- l.map[s.map %in% loopE.NewStand]
#Use summarize function (w/ min()) to select a single coordinate value for each new stand.
v.Coord_a20a <- summarize(vl.map_a20,vs.map_a20,min)
#Subset coordinates
v.Coord_a20b <- as.vector(v.Coord_a20a[,2])
#Update
Coord.List <- c(Coord.List,v.Coord_a20b)
MU.List <- c(MU.List, smud)
mfri.Matrix <- rbind(mfri.Matrix,nmvd)
mfri.List <- apply(mfri.Matrix,1,sum)
mfri.List <- round(30/mfri.List,0)
mfri.List <- ifelse(mfri.List == Inf, 32, mfri.List)
#Update
mfri_lower.List <- c(mfri_lower.List,
fuelbed_lut$mfri_shortens[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)])
#Select option 1 for fuelbed transition when mfri lengthens
mfri_lengthens_1 <- fuelbed_lut$mfri_lengthens_1[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)]
#Select option 2 for fuelbed transition when mfri lengthens
mfri_lengthens_2 <- fuelbed_lut$mfri_lengthens_2[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)]
#Randomly choose between option 1 and 2 for each fuelebd.
mfri_lengthens <- apply(matrix(data = c(mfri_lengthens_1,
mfri_lengthens_2),length(mfri_lengthens_1), 2),
1, sample, size = 1)
#Update
mfri_upper.List <- c(mfri_upper.List, mfri_lengthens)
#Update
Area.List <- c(Area.List,loopE.Area)
#order .List objects by stand number
Fuelbed.List <- Fuelbed.List[order(Stand.List)]
MU.List <- MU.List[order(Stand.List)]
Area.List <- Area.List[order(Stand.List)]
mfri.Matrix <- mfri.Matrix[order(Stand.List),]
Age.List <- Age.List[order(Stand.List)]
mfri_lower.List <- mfri_lower.List[order(Stand.List)]
mfri_upper.List <- mfri_upper.List[order(Stand.List)]
Stand.List <- sort(Stand.List)
#Remove stands that have been overwritten
tslt.List <- tslt.List[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Fuelbeds <- tslt.Fuelbeds[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Stands <- tslt.Stands[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
#Update time-since-last-treatment list and associated stand list
tslt.List <- c(tslt.List, rep(0, length(
loopE_allFire$NewStand[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$AffectedFuelbed) %in% c(2,3,4,6,7,8)])))
tslt.Stands <- c(tslt.Stands, loopE_allFire$NewStand[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$AffectedFuelbed) %in% c(2,3,4,6,7,8)])
tslt.Fuelbeds <- c(tslt.Fuelbeds, loopE_allFire$AffectedFuelbed[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$AffectedFuelbed) %in% c(2,3,4,6,7,8)])
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(any(c(length(Stand.List),
length(Fuelbed.List),
length(mfri.List),
length(MU.List),
#length(T1E.List),
#length(T2E.List),
#length(D1E.List),
#length(D2E.List),
length(Area.List),
length(mfri_lower.List),
length(mfri_upper.List),
length(Age.List)) != (length(unique(as.vector(s.map)))-1)) == T)
{
r101 <- 3
break
} else
{
r101 <- ifelse(any(s.map < 0 & s.map > -9999),33,0)
}
##############################################################################
##############################################################################
##############################################################################
#Update fuelbeds based on impacts of changing mean fire return interval.
#Make a copy of the Fuelbed.List
feof <- Fuelbed.List
#Create a parelle list that shows lower bound of mFRI for each stand
mfri_lower <- fuelbed_lut$mfri_lower[match(feof,fuelbed_lut$fuelbed)]
#Create a parellel list that shows upper bound of mFRI for each stand
mfri_upper <- fuelbed_lut$mfri_upper[match(feof,fuelbed_lut$fuelbed)]
#Replace fuelbed with one representing a more frequent fire regime if the mFRI is shorter
#than the lower limit for the current fuelbed.
feof[mfri.List <  mfri_lower] <- mfri_lower.List[mfri.List < mfri_lower]
#Replace fuelbed with one representing a less frequent fire regime if the mFRI is longer
#than the lower limit for the current fuelbed.
feof[mfri.List > mfri_upper] <- mfri_upper.List[mfri.List > mfri_upper]
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL <- Stand.List[Fuelbed.List != feof]
feof2 <- feof[Fuelbed.List != feof]
vs.map <- s.map[s.map %in% s.SL]
v.feof2 <- feof2[match(vs.map, s.SL)]
f.map[s.map %in% s.SL] <- v.feof2
Fuelbed.List <- feof
} else
{
#Update files based on time-since-last-treatment>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Show max time-since-last-treatment before state transitions for each fuelbed
max_tslt <- fuelbed_lut$max_tslt[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#List each of the fuelbeds corresponding with tslt object above
max_tslt_fb <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#Expand to the max tslt object for each row in tslt.List
max_tslt_x_stand <- max_tslt[match(tslt.Fuelbeds, max_tslt_fb)]
#Crash model is Fuelbed.List turned into a list()
if(length(max_tslt_x_stand) != length(tslt.List))
{
r101 <- "inconcistency in tslt tracking"
break
} else
{
r101 <- r101
}
#List stand numbers for stands that will transition.
replace_stands <- tslt.Stands[tslt.List > max_tslt_x_stand]
#List fuelbeds of stands that will transition.
replace_fbs <- tslt.Fuelbeds[tslt.List > max_tslt_x_stand]
#List unique current fuelbeds for stands that will transition.
old_fbs <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new fuelbeds for stands that will transition.
new_fbs <- fuelbed_lut$post_1[fuelbed_lut$fuelbed %in% replace_fbs]
#Expand new unique fuelbeds to the number of stands that will transition.
new_fbs_x_stand <- new_fbs[match(replace_fbs, old_fbs)]
#Replace current fuelbeds with new ones in cases where tslt exceeds limit for
#state.
tslt.Fuelbeds[tslt.Stands %in% replace_stands] <- new_fbs_x_stand
#Order tslt objects by stand number before you apply it to .List objects
tslt.List <- tslt.List[order(tslt.Stands)]
tslt.Fuelbeds <- tslt.Fuelbeds[order(tslt.Stands)]
tslt.Stands <- sort(tslt.Stands)
#Apply changes to f.map and Fuelbed.List
vt.map <- s.map[s.map %in% tslt.Stands]
v.tslt <- tslt.Fuelbeds[match(vt.map, tslt.Stands)]
f.map[s.map %in% tslt.Stands] <- v.tslt
Fuelbed.List[Stand.List %in% tslt.Stands] <- tslt.Fuelbeds
#Remove stands that have been overwritten
tslt.List <- tslt.List[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Fuelbeds <- tslt.Fuelbeds[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Stands <- tslt.Stands[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
#Remove rows where fuelbeds no longer represent a silvicultural treatment
tslt.List <- tslt.List[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Stands <- tslt.Stands[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
tslt.Fuelbeds <- tslt.Fuelbeds[which(mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, tslt.Fuelbeds) %in% c(2,3,4,6,7,8) == T)]
}
#Post-wildfire processing >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Update files based on succession>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Identify potential changes in fuelbeds based on succession pathways.
pmuf <- mapply(function(x) ifelse(
Age.List[x] > fuelbed_lut$succession_max[fuelbed_lut$fuelbed == Fuelbed.List[x]],
ifelse(fuelbed_lut$succession_post_2[fuelbed_lut$fuelbed == Fuelbed.List[x]] > 0,
resample(c(fuelbed_lut$succession_post_1[fuelbed_lut$fuelbed == Fuelbed.List[x]],
fuelbed_lut$succession_post_2[fuelbed_lut$fuelbed == Fuelbed.List[x]]),1),
fuelbed_lut$succession_post_1[fuelbed_lut$fuelbed == Fuelbed.List[x]]),
Fuelbed.List[x]),1:length(Stand.List))
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL2 <- Stand.List[Fuelbed.List != pmuf]
pmuf2 <- pmuf[Fuelbed.List != pmuf]
vs.map2 <- s.map[s.map %in% s.SL2]
v.pmuf2 <- pmuf2[match(vs.map2, s.SL2)]
f.map[s.map %in% s.SL2] <- v.pmuf2
Fuelbed.List[Stand.List %in% s.SL2] <- pmuf2
#Kill model if any fuelbed numbers are < 0. This means there is an error in the lookup
#table.
if(any(Fuelbed.List < 0) == T)
{
broken.stands <- Stand.List[Fuelbed.List < 0]
f.orig <- matrix(scan(paste("inputs/sef_fmap_v2_",rows,"x",cols,".txt",
sep = ""),skip = fh.adj),ncol=cols,byrow=T)#16
break
} else
{
#don't break
}
#Update D.List
#D.List <- cbind(T1E.List, T2E.List, D1E.List, D2E.List)
#Create maps for interval years.
if((a %% Interval) == 0)
{
#  #Save Fuelbed Map (f.map).
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
write.table(s.map, file = paste(output_path, "sef_smap_run_", run, "_",
dt,"_",tm,"_R",rows,"xC",cols,"_Y",a,".txt",sep = ""),
append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA",
dec = ".", row.names = FALSE,col.names = FALSE, qmethod =
c("escape", "double"))#
write.table(f.map, file = paste(output_path, "sef_fmap_run_", run, "_",
dt,"_",tm,"_R",rows,"xC",cols,"_Y",a,".txt",sep = ""),
append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA",
dec = ".", row.names = FALSE,col.names = FALSE, qmethod =
c("escape", "double"))#
}
} #1.0.0 ---------------------------------------------------------------------------
