{#---------------------------------------------------D-FALSE
new.cells <- resample(avlo,(desa - (dema + length(ocod))))
s.map[new.cells] <- s.map[new.cells]*tesn_t
tesn <- unique(s.map[s.map < 0 & s.map > NoData.Unit])
}#-------------------------------------------------D-FALSE
}#-------------------------------------------------------C-FALSE
}#-------------------------------------------------------------A-FALSE
osnd <- c(osnd, s.map[new.cells]) #tracks stand numbers involved in disturbance.
ocod <- c(ocod, new.cells) #tracks coordinates involved in disturbance.
} else #11.2.1 ----------------------------------------------------------------------
{#11.2.2
#Save run data.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
cat(paste("run_", run,"_", dt,"_",tm,"_year_",a,"__wildfire_",e, "__block_",f,"__blocked_",
h,"__.txt",sep = ""), file = paste("fdm_iterations_status/run_", run, "_iterations.txt", sep = ""), fill = T, append = T)#
#NOTE (12/6/2015)
#Fire has burned out and must be reassigned to a new area. Use spread.type = 0 to
#direct loop 9 into section that will locate anew scd
spread.type <- 0
breaks <- 1122
break
} #11.2.2 ---------------------------------------------------------------------------
} else #11.1.1 ----------------------------------------------------------------------
{ #11.1.2 ---------------------------------------------------------------------------
#Save run data.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
cat(paste("run_", run,"_", dt,"_",tm,"_year_",a,"__wildfire_",e, "__block_",f,"__blocked_",
h,"__.txt",sep = ""), file = paste("fdm_iterations_status/run_", run, "_iterations.txt", sep = ""), append = T)#
breaks <- 1112
break
} #11.1.2 ---------------------------------------------------------------------------
if(spread.type == 11)
{#11.3.1
#Save units that where burned so far.
burned.units <- c(burned.units, f.bun)
#Save run data.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
cat(paste("run_", run,"_", dt,"_",tm,"_year_",a,"__wildfire_",e, "__block_",f,"__blocked_",
h,"__.txt",sep = ""), file = paste("fdm_iterations_status/run_", run, "_iterations.txt", sep = ""), fill = T, append = T)#
breaks < - 1131
break
} else #11.3.1
{#11.3.2
#Save run data.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
cat(paste("run_", run,"_", dt,"_",tm,"_year_",a,"__wildfire_",e, "__block_",f,"__blocked_",
h,"__.txt",sep = ""), file = paste("fdm_iterations_status/run_", run, "_iterations.txt", sep = ""), fill = T, append = T)#
breaks <- 1132
}#11.3.2
} #11.0.0 ---------------------------------------------------------------------------
}#9.7.2 (RX FIRE LOOP)--------------------------------------------------------------
#NEW F.1.2---------------------------------------------------------------
#Reset tesn, it should be -1 for FDM, except in loop 10 where it must include multiple
#values to support the burn out function.
tesn <- -1#temporary stand number.
osnd <- abs(osnd)
#Show fuelbeds associated with stands affected by fire
fb_f12 <- Fuelbed.List[Stand.List %in% osnd]
#List corresponding stand numbers.
osno <- Stand.List[Stand.List %in% osnd]
#Expand fuelbeds to include each occurence of stand number in osnd
effb <- fb_f12[match(osnd, osno)]
#Calculate number of new stands
noef <- length(osno)
#Determine new stand numbers for treatment[b], block[cc].
if(noef == 0)
{
neef <- 0
} else
{
neef <- seq((mudn + 1), (mudn + noef), 1)
}
#Map new stands
od <- data.frame(ocod, osnd)
od <- od[order(od$ocod),]
v.neef <- neef[match(od$osnd, osno)]
s.map[l.map %in% od$ocod] <- v.neef
if(sum(neef) == 0)
{
loopF.NewStand <- loopF.NewStand
loopF.Area <- loopF.Area
} else
{
loopF.NewStand <- c(loopF.NewStand,neef)
l.neef <- rep(1,length(v.neef))
s.neef_a <- summarize(l.neef, v.neef, sum)
s.neef <- as.vector(s.neef_a[,2])
loopF.Area <- c(loopF.Area, s.neef)
}
loopF.ReplacedStand <- c(loopF.ReplacedStand, osno)
loopF.E_no <- c(loopF.E_no, rep(e, length(osno)))
loopF.F_no <- c(loopF.F_no, rep(f, length(osno)))
loopF.G_no <- c(loopF.G_no, rep(g, length(osno)))
g.g <- sum(g.g, ifelse(g == 0,h,g))#tracks expansions
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(length(unique(loopF.NewStand)) != length(loopF.NewStand) |
length(loopF.ReplacedStand) != length(loopF.NewStand) |
length(v.neef) != length(s.map[l.map %in% od$ocod]))
{
r101 <- 2
break
} else
{
r101 <- 0
}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
if(length(s.map[s.map < 0 & s.map > -9999]) > 0)
{
aaa <- data.frame(B = loopB.new_stand, F = loopF.NewStand)
} else
{
f <- f
}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
} else #9.4.1 ----------------------------------------------------------------------
{ #9.4.2 ---------------------------------------------------------------------------
} #9.4.2 ---------------------------------------------------------------------------
} else #9.3.1 ----------------------------------------------------------------------
{ #9.3.2 ---------------------------------------------------------------------------
#Reset tesn, it should be -1 for FDM, except in loop 10 where it must include multiple
#values to support the burn out function.
tesn <- -1#temporary stand number.
osnd <- abs(osnd)
#Show fuelbeds associated with stands affected by fire
fb_f12 <- Fuelbed.List[Stand.List %in% osnd]
#List corresponding stand numbers.
osno <- Stand.List[Stand.List %in% osnd]
#Expand fuelbeds to include each occurence of stand number in osnd
effb <- fb_f12[match(osnd, osno)]
#Unique old stands
osno <- sort(unique(osnd))
#Calculate number of new stands
noef <- length(osno)
#Determine new stand numbers for treatment[b], block[cc].
if(noef == 0)
{
neef <- 0
} else
{
neef <- seq((mudn + 1), (mudn + noef), 1)
}
#Map new stands
od <- data.frame(osnd = osnd, ocod = ocod)
od <- od[order(od$ocod),]
v.neef <- neef[match(od.b$osnd, osno)]
s.map[s.map %in% osno] <- v.neef
#Log new stand numbers and associated disturbances when they have been added to
#s.map.
if(sum(neef) == 0)
{
loopF.NewStand <- loopF.NewStand
loopF.Area <- loopF.Area
} else
{
loopF.NewStand <- c(loopF.NewStand,neef)
l.neef <- rep(1,length(v.neef))
s.neef_a <- summarize(l.neef, v.neef, sum)
s.neef <- as.vector(s.neef_a[,2])
loopF.Area <- c(loopF.Area, s.neef)
}
loopF.ReplacedStand <- c(loopF.ReplacedStand, osno)
loopF.E_no <- c(loopF.E_no, rep(e, length(osno)))
loopF.F_no <- c(loopF.F_no, rep(f, length(osno)))
loopF.G_no <- c(loopF.G_no, rep(g, length(osno)))
g.g <- sum(g.g, ifelse(g == 0,h,g))#tracks expansions
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(length(unique(loopF.NewStand)) != length(loopF.NewStand) |
length(loopF.ReplacedStand) != length(loopF.NewStand))
{
r101 <- 8
} else
{
r101 <- 0
}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
if(length(s.map[s.map < 0 & s.map > -9999]) > 0)
{
aaa <- data.frame(B = loopB.new_stand, F = loopF.NewStand)
} else
{
f <- f
}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
break
} #9.3.2 ---------------------------------------------------------------------------
} else #9.1.1 ----------------------------------------------------------------------
{ #9.1.2 ---------------------------------------------------------------------------
break
} #9.1.2 ---------------------------------------------------------------------------
##############################################################################
##############################################################################
##############################################################################
} #9.0.0 ---------------------------------------------------------------------------
#Log new stand numbers and associated disturbances when they have been added to
#s.map.
loopE.NewStand <- c(loopE.NewStand,loopF.NewStand)
loopE.Area <- c(loopE.Area,loopF.Area)
loopE.ReplacedStand <- c(loopE.ReplacedStand,loopF.ReplacedStand)
loopE.E_no <- c(loopE.E_no, loopF.E_no)
loopE.F_no <- c(loopE.F_no, loopF.F_no)
loopE.G_no <- c(loopE.G_no, loopF.G_no)
loopE <- data.frame(NewStand = loopE.NewStand,
ReplacedStand = loopE.ReplacedStand,
Area = loopE.Area,
E_no = loopE.E_no,
F_no = loopE.F_no,
G_no = loopE.G_no)
loopE <- loopE[order(loopE$ReplacedStand),]
} else #8.1.1 ----------------------------------------------------------------------
{ #8.1.2 ---------------------------------------------------------------------------
#Log new stand numbers and associated disturbance when they have been added to
#s.map.
loopE.NewStand <- c(loopE.NewStand,loopF.NewStand)
loopE.Area <- c(loopE.Area,loopF.Area)
loopE.ReplacedStand <- c(loopE.ReplacedStand,loopF.ReplacedStand)
loopE.E_no <- c(loopE.E_no, loopF.E_no)
loopE.F_no <- c(loopE.F_no, loopF.F_no)
loopE.G_no <- c(loopE.G_no, loopF.G_no)
loopE <- data.frame(NewStand = loopE.NewStand,
ReplacedStand = loopE.ReplacedStand,
Area = loopE.Area,
E_no = loopE.E_no,
F_no = loopE.F_no,
G_no = loopE.G_no)
loopE <- loopE[order(loopE$ReplacedStand),]
} #8.1.2 ---------------------------------------------------------------------------
#Record date and time.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
#Tracking device
d.summary <- paste(
" Date: ", dt,
" Time: ", tm,
" Year: ", a,
" PercentComplete_ForYear: ", round(((which(tdn[tdy == a] == e)/
length(tdn[tdy == a]))*100),0),
" Disturbance_No: ", e,
" Name: ", f.disturbances$DisturbanceTitle[tdc[e]],
"MgmtOp: ", "N/A",
"BurnBlock: ", "N/A",
" BurnedArea_Expected: ", desa,
" BurnedArea_Actual: ", dema,
"UnBurned_Area: ", desa-dema,
" Blocks: ", f,
" Expansions: ", g.g,
"HiStandNo: ", max(neef))
# e.summary <- rbind(e.summary, d.summary)
#Save run data.
cat(d.summary, file = paste("fdm_disturbances_status/run_", run, "_disturbances.txt", sep = ""), fill = T, append = T)#
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                  #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                 #
if(r101 > 0)                                                                 #
{                                                                            #
r101 <- r101
break
} else                                                                       #
{                                                                            #
r101 <- r101
}                                                                            #
#
} #8.0.0 ------------------------------------------------------------------#
}                                                                            #
#
if(r101 > 0)                                                                 #
{                                                                            #
r101 <- r101
break
} else                                                                       #
{                                                                            #
r101 <- r101
}                                                                            #
##############################################################################
##############################################################################
##############################################################################
#Post run step 2>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Update files if there were disturbances in year[a].
if(length(loopE.NewStand) > 0)
{
#Object shows fuelbeds associated with each new stand number created by
#disturbances in year[a].
#ufxDa <- mapply(function(x) unique(f.map[s.map == x]), loopE.NewStand)
ufxDa_1 <- Fuelbed.List[Stand.List %in% loopE$ReplacedStand]
usxDa_1 <- Stand.List[Stand.List %in% loopE$ReplacedStand]
ufxDa <- ufxDa_1[match(loopE$ReplacedStand, usxDa_1)]
#Code below replaces loop, vene though there are more lines it should run way faster.
#Add ufxDa to loopE data frame
loopE <- data.frame(loopE, ufxDa = ufxDa)
#Sort data frame by new stands
loopE <- loopE[order(loopE$NewStand),]#probably unecessary
#seperate out new stands from s.map, lists occurrences of new stands from min to max coords.
vs.map_a15 <- s.map[s.map %in% loopE$NewStand]
#List of row numbers in d.post where fuelbeds need to be updated based on treatment
LL1_a15 <- which(d.post$fuelbed %in% loopE$ufxDa)
#Fuelbeds that may be updated corresponding with row numbers in LL1_a15
FL1_a15 <- d.post$fuelbed[d.post$fuelbed %in% ufxDa]
#row numbers in d.post corresponding with each existing fuelbed in each new stand
LL2_a15 <- LL1_a15[match(loopE$ufxDa, FL1_a15)]
#Activate when you can differentiate between crown fire and surface fire
newFB_a15 <- d.post[LL2_a15,1]
#Lists occurrences of new fuelbeds from min to max coords.
v.newFB_a15 <- newFB_a15[match(vs.map_a15, loopE$NewStand)]
#Replace old fuelbeds with new ones in f.map
f.map[s.map %in% loopE$NewStand] <- v.newFB_a15
#List ages associated with each stand that has been affected by treatment
#These will be used to update Age.List but are unchanged since treatments do not
#change overstory age.
newAGE_a15_1 <- Age.List[Stand.List %in% loopE$ReplacedStand]
newAGE_a15 <- newAGE_a15_1[match(loopE$ReplacedStand, usxDa_1)]
#Re-order loopB data frame by old stands because that is the order of ages in newAGE_a7.
loopE <- loopE[order(loopE$ReplacedStand),]
#Add newAGE_a7 to loopB data.frame
loopE <- data.frame(loopE, newAGE_a15 = newAGE_a15)
#List stands that have been altered by disturbances.
ss2 <- loopE.ReplacedStand
standd <- sort(unique(ss2))#there can be duplicates, this will mess up the shortcut in a9
sb <- summarize(loopE.Area,ss2,sum)#sum areas for duplicates.
saread <- as.vector(sb[,2])
smud <- mapply(function(y) MU.List[Stand.List == y], loopE.ReplacedStand)
#Shelve fire history for stands that have been impacted by disturbance
new_mfri_vec <- mapply(function(y) mfri.Matrix[Stand.List == y,], loopE.ReplacedStand)
nmvd <- t(new_mfri_vec)
#Add a fire for stands that were burned in wildfires
nmvd[,30] <- 1
#Change stand properties as needed for treatments.
for(i in 1:length(standd))
{
Area.List[Stand.List == standd[i]] <-
Area.List[Stand.List == standd[i]] - saread[i]
}
#Update list to remove any stands that have been overwritten.
Stand.List <- Stand.List[(Area.List == 0) == F]
Fuelbed.List <- Fuelbed.List[(Area.List == 0) == F]
Age.List <- Age.List[(Area.List == 0) == F]
T1E.List <- T1E.List[(Area.List == 0) == F]
T2E.List <- T2E.List[(Area.List == 0) == F]
D1E.List <- D1E.List[(Area.List == 0) == F]
D2E.List <- D2E.List[(Area.List == 0) == F]
Coord.List <- Coord.List[(Area.List == 0) == F]
MU.List <- MU.List[(Area.List == 0) == F]
mfri.Matrix <- mfri.Matrix[(Area.List == 0) == F,]
mfri_lower.List <- mfri_lower.List[(Area.List == 0) == F]
mfri_upper.List <- mfri_upper.List[(Area.List == 0) == F]
Area.List <- Area.List[(Area.List == 0) == F]
#Update list to add new stands.
Stand.List <- c(Stand.List, loopE.NewStand)
Fuelbed.List <- c(Fuelbed.List, newFB_a15)
Age.List <- c(Age.List, newAGE_a15)
#List fuelbeds that need to be updated.
pdaFB_a20 <- pda$pre[pda$pre %in% newFB_a15]
#List corresponding updated age restrictions
pdaTH_a20 <- pda$thin[pda$pre %in% newFB_a15]
#List occurences of age restriction for each new stand
v.THIN_a20 <- pdaTH_a20[match(newFB_a15,pdaFB_a20)]
#Update
T1E.List <- c(T1E.List,v.THIN_a20)
#List corresponding updated age restrictions
pdaHE_a20 <- pda$herb[pda$pre %in% newFB_a15]
#List occurences of age restriction for each new stand
v.HERB_a20 <- pdaHE_a20[match(newFB_a15,pdaFB_a20)]
#Update
T2E.List <- c(T2E.List, v.HERB_a20)
#List corresponding updated age restrictions
pdaSF_a20 <- pda$sfire[pda$pre %in% newFB_a15]
#List occurences of age restriction for each new stand
v.SFIRE_a20 <- pdaSF_a20[match(newFB_a15,pdaFB_a20)]
#Update
D1E.List <- c(D1E.List, v.SFIRE_a20)
#List corresponding updated age restrictions
pdaCF_a20 <- pda$cfire[pda$pre %in% newFB_a15]
#List occurences of age restriction for each new stand
v.CFIRE_a20 <- pdaCF_a20[match(newFB_a15,pdaFB_a20)]
#Update
D2E.List <- c(D2E.List, v.CFIRE_a20)
#List new stand occurrences in s.map
vs.map_a20 <- s.map[s.map %in% loopE.NewStand]
#List corresponding coordinates (l.map) for new stand occurrences in s.map
vl.map_a20 <- l.map[s.map %in% loopE.NewStand]
#Use summarize function (w/ min()) to select a single coordinate value for each new stand.
v.Coord_a20a <- summarize(vl.map_a20,vs.map_a20,min)
#Subset coordinates
v.Coord_a20b <- as.vector(v.Coord_a20a[,2])
#Update
Coord.List <- c(Coord.List,v.Coord_a20b)
MU.List <- c(MU.List, smud)
mfri.Matrix <- rbind(mfri.Matrix,nmvd)
mfri.List <- apply(mfri.Matrix,1,sum)
mfri.List <- round(30/mfri.List,0)
mfri.List <- ifelse(mfri.List == Inf, 32, mfri.List)
#Update
mfri_lower.List <- c(mfri_lower.List, d.post$more_fire[match(newFB_a15,d.post$fuelbed)])
#Select option 1 for fuelbed transition when mfri lengthens
less1 <- d.post$less_fire1[match(newFB_a15,d.post$fuelbed)]
#Select option 2 for fuelbed transition when mfri lengthens
less2 <- d.post$less_fire1[match(newFB_a15,d.post$fuelbed)]
#Randomly choose between option 1 and 2 for each fuelebd.
less <- apply(matrix(data = c(less1,less2),length(less1), 2), 1, sample, size = 1)
#Update
mfri_upper.List <- c(mfri_upper.List, less)
#Update
Area.List <- c(Area.List,loopE.Area)
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(any(c(length(Stand.List),
length(Fuelbed.List),
length(mfri.List),
length(MU.List),
length(T1E.List),
length(T2E.List),
length(D1E.List),
length(D2E.List),
length(Area.List),
length(mfri_lower.List),
length(mfri_upper.List),
length(Age.List)) != (length(unique(as.vector(s.map)))-1)) == T)
{
r101 <- 3
break
} else
{
r101 <- 0
}
##############################################################################
##############################################################################
##############################################################################
#Update fuelbeds
feof <- Fuelbed.List
start <- d.post$mfri_start[match(feof,d.post$fuelbed)]
end <- d.post$mfri_end[match(feof,d.post$fuelbed)]
feof[mfri.List < start] <- mfri_lower.List[mfri.List < start]
feof[mfri.List > end] <- mfri_upper.List[mfri.List > end]
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL <- Stand.List[Fuelbed.List != feof]
feof2 <- feof[Fuelbed.List != feof]
vs.map <- s.map[s.map %in% s.SL]
v.feof2 <- feof2[match(vs.map, s.SL)]
f.map[s.map %in% s.SL] <- v.feof2
Fuelbed.List <- feof
#cbind(Stand.List,Fuelbed.List,Area.List)
} else
{
}
#Post run step 3>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#Update files based on succession
#Identify potential changes in fuelbeds based on succession pathways.
pmuf <- mapply(function(x) ifelse(
Age.List[x] > f.path$end[f.path$pre == Fuelbed.List[x]],
ifelse(f.path$post_2[f.path$pre == Fuelbed.List[x]] > 0,
resample(c(f.path$post_1[f.path$pre == Fuelbed.List[x]],
f.path$post_2[f.path$pre == Fuelbed.List[x]]),1),
f.path$post_1[f.path$pre == Fuelbed.List[x]]),
Fuelbed.List[x]),1:length(Stand.List))
#Update f.map
#Improved function to update f.map based on mFRI. Former code used a for()
s.SL2 <- Stand.List[Fuelbed.List != pmuf]
pmuf2 <- pmuf[Fuelbed.List != pmuf]
vs.map2 <- s.map[s.map %in% s.SL2]
v.pmuf2 <- pmuf2[match(vs.map2, s.SL2)]
f.map[s.map %in% s.SL2] <- v.pmuf2
Fuelbed.List[Stand.List %in% s.SL2] <- pmuf2
#Update D.List
D.List <- cbind(T1E.List, T2E.List, D1E.List, D2E.List)
#Save run data.
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
#Save run data.
cat(paste("Year: ", a, "TreatedExpected: ", meanTAP, "TreatedActual: ", meanTAA,
"BurnedExpected: ", desa, "BurnedActual: ", dema),
file = paste("run_", run, "_annualSummary.txt", sep = ""), fill = T, append = T)#
#Create maps for interval years.
if((a %% Interval) == 0)
{
#  #Save Fuelbed Map (f.map).
dt <- Sys.Date()
tm <- format(Sys.time(), format = "%H.%M.%S",
tz = "", usetz = FALSE)
write.table(s.map, file = paste("run_", run,"maps/sef_smap_",
dt,"_",tm,"_R",rows,"xC",cols,"_Y",a,".txt",sep = ""),
append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA",
dec = ".", row.names = FALSE,col.names = FALSE, qmethod =
c("escape", "double"))#
write.table(f.map, file = paste("run_", run,"maps/sef_fmap_",
dt,"_",tm,"_R",rows,"xC",cols,"_Y",a,".txt",sep = ""),
append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA",
dec = ".", row.names = FALSE,col.names = FALSE, qmethod =
c("escape", "double"))#
}
} #1.0.0 ---------------------------------------------------------------------------
