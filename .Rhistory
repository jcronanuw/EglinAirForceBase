mm1 <- mfri.Matrix[,-1]
#Force into a matrix (opens as a data.frame with mode = integer; these characteristics will crash FDM)
mm2 <- data.matrix(mm1)
#Data mode is still integer and there are additional attributes
#Convert to vector (removes attributes from data.frame and coverts integer to numeric)
mm3 <- as.vector(mm2, mode = 'numeric')
#Restore rows and cols.
mm4 <- matrix(data = mm3, nrow = length(mm1[,1]), ncol = length(mm1[1,]))
mfri.Matrix <- mm4
T1E.List <- read.table(paste(
"inputs/sef_T1EList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
T1E.List <- as.vector(T1E.List[,2], mode = "numeric")#24
T1E.List <- T1E.List[-1]
T2E.List <- read.table(paste(
"inputs/sef_T2EList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
T2E.List <- as.vector(T2E.List[,2], mode = "numeric")#24
T2E.List <- T2E.List[-1]
D1E.List <- read.table(paste(
"inputs/sef_D1EList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
D1E.List <- as.vector(D1E.List[,2], mode = "numeric")#25
D1E.List <- D1E.List[-1]
D2E.List <- read.table(paste(
"inputs/sef_D2EList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
D2E.List <- as.vector(D2E.List[,2], mode = "numeric")#25
D2E.List <- D2E.List[-1]
MU.List <- read.table(paste(
"inputs/sef_MUList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
MU.List <- as.vector(MU.List[,2], mode = "numeric")#25
MU.List <- MU.List[-1]
TSLFxUnits <- read.table(paste(
"inputs/sef_TSLF.List_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
TSLFxUnits <- TSLFxUnits[,-1]
mfri_lower.List <- read.table(paste(
"inputs/sef_less_fire_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
mfri_lower.List <- mfri_lower.List[,-1]
mfri_upper.List <- read.table(paste(
"inputs/sef_more_fire_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
mfri_upper.List <- mfri_upper.List[,-1]
#Last line removes the first integer from the .List objects which contain the NoDate
#area and will not match up with any date in f.path, resulting in an error.
####################################################################################
####################################################################################
#STEP 05: Import Conditional Database
f.path <- read.table("inputs/sef_lut_pathways_succession.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
f.treatments <- read.table("inputs/sef_lut_menu_treatment.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE, stringsAsFactors = F)
f.disturbances <- read.table("inputs/sef_lut_menu_disturbance.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE, stringsAsFactors = F)
t.post <- read.table("inputs/sef_lut_pathways_silviculture.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
d.post <- read.table("inputs/sef_lut_pathways_fire.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
pda <- read.table("inputs/sef_lut_thresholds_disturbances.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
f.probability <- read.table("inputs/sef_lut_prob_burning.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE, stringsAsFactors = F)
f.wind <- read.table("inputs/sef_lut_prob_wind.csv", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
b.unit <- read.table("inputs/sef_lut_burn_units.txt", header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
b.unit <- data.frame(unit = b.unit[,2], area_ac = b.unit[,3], thin= b.unit[,4],
herb = b.unit[,5], fire = b.unit[,6])#remove col 1 and rename cols 2-6.
b.block <- read.table("inputs/sef_lut_pathways_burnBlocks.csv", header=T,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
b.block <- b.block[-1,]#remove first row -- no data unit.
b.thresh <- read.table("inputs/sef_lut_threshold_mgmtOptions.csv", header=T,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
f.start <- read.table("inputs/sef_lut_pathways_fireStart.csv", header=T,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
f.start <- f.start[-1,]#remove first row -- no data unit.
####################################################################################
####################################################################################
#STEP 06: Simplify input data.
ttxm <- t.post[,-1]#removes the fuelbed column for t.post.
dtxm <- d.post[,-1]#removes the fuelbed column from d.post.
pdxm <- pda[,-1]#removes the fuelbed column from pda.
})#1
input_path
head(b.unti)
head(b.untit)
head(b.unit)
system.time(xx <- mapply(function(y{y+1}, 1:1000000)))
system.time(xx <- mapply(function(y){y+1}, 1:1000000))
quit()
###START FUELBED DYNAMICS MODEL####
#Version 2.0 (Derviced from version 17e, the most recent version withmodel
#documentation
#>>>>>>>>>>>>>>>>>>>          HOW WOULD YOU LIKE TO RUN THE FUELBED DYNAMICS MODEL?
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>          COMPUTING PARAMETERS...
#Do you want to install required R packages on this machine?
#Yes --- TRUE
#No ---- FALSE
INSTALL_PACKAGES <- FALSE
#Enable the graphics card as a processor for cellular automata sub-models?
#This will only work on machines with a Linux OS
#Yes --- TRUE
#No ---- FALSE
USE_GPU <- FALSE
#Would you like to replicate this run?
#If so use the same seed number for subsequent runs
#SEED is the starting point for psuedo random number generator
SEED <- 999
#Select a run ID, this should be a number, ideally unique that will help track this
#run. Output files are tagged with this ID number.
RUN <- 52
#Reporting interval, how often (in model years) should output maps be produced?
#I.e., once every ... years.
#Must be less than model run time (YEARS object)
Interval <- 10
#What is your working directory. I.e. where are your input files coming from?
input_path <- "C:/Users/jcronan/Documents/GitHub/EglinAirForceBase"
#What is your output directory. I.e., here do you want maps and status reports to
#go?
output_path <- "C:/usfs_sef_outputs_FDM/"
#>>>>>>>>>>>>>>>>>>>          DISTURBANCE AND MODEL RUN TIME PARAMETERS...
#Select pre-packaged or manually entered forest management and wildfire regime
#parameters + model run time (in years)
#1 ---  Actual paramater values derived from forest operations and wildfire data
#       for the period 2000-2015 and 50 year run
#2 ---  Testing generates small areas of presribed fire and wildfire annually
#       and 2 yearr un.
#3 ---  Manually enter disturbance parameters. Enter parameters below on
#       lines 99-123.
disturbance_regime <- 3
#Disturbance and time parameters
if(disturbance_regime == 1)
{
#Number of years the model should run for.
YEARS <- 50
#Acres thinned annually.
THINNING <- 5000
#Acres of herbicide application annually
HERBICIDE <- 5000
#Acres prescribed burned annually
#RX_FIRE <- 100000
#Natural fire rotation in years for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
NATURAL_FIRE_ROTATION <- c(54.38,457.39)
#Mean fire size in acres for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
MEAN_FIRE_SIZE <- c(103.65,5.23)
#Standard deviation of mean fire size for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
STAND_DEV_FIRE_SIZE <- c(361.12,13.98)
} else
{if(disturbance_regime == 2)
{
#Number of years the model should run for.
YEARS <- 2
#Acres thinned annually.
THINNING <- 0
#Acres of herbicide application annually
HERBICIDE <- 0
#Acres prescribed burned annually
#RX_FIRE <- 1000
#Natural fire rotation in years for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
NATURAL_FIRE_ROTATION <- c(10554.38, 10457.39)
#Mean fire size in acres for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
MEAN_FIRE_SIZE <- c(103.65, 5.23)
#Standard deviation of mean fire size for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
STAND_DEV_FIRE_SIZE <- c(361.12, 13.98)
} else
{
#Number of years the model should run for.
YEARS <- 1
#Acres thinned annually.
THINNING <- 5000
#Acres of herbicide application annually
HERBICIDE <- 5000
#Acres prescribed burned annually
RX_FIRE <- 1000
#Natural fire rotation in years for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
NATURAL_FIRE_ROTATION <- c(254.38,1457.39)
#Mean fire size in acres for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
MEAN_FIRE_SIZE <- c(103.65,5.23)
#Standard deviation of mean fire size for:
#Element 1 -- Eglin Air Force Base
#Element 2 -- Surrounding 10-km buffer landscape
STAND_DEV_FIRE_SIZE <- c(361.12, 13.98)
}}
#>>>>>>>>>>>>>>>>>>>          FINISHED
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>          HARD-CODED PARAMETERS -- THESE SHOULD NOT BE CHANGED
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>          COMPUTING PARAMTERS...
#Number of iterations for the following nested loops:
#Loop 2 (var. = b)    -- management actions
#Loop 3 (var. = cc)   -- blocks (management actions)
#Loop 4 (var. = d)    -- expansions (management actions)
#Loop 9 (var. = f)    -- blocks (wildfire)
#Loop 10 (var. = g)   -- expansions (unsuppressed wildfire)
#Loop 11 (var. = h)   -- expansions (wildfire with block and burn suppression)
r.max <- 1000#7
#StarTing stand numbers for...
#-----------------------------------------------------------------------------------
#Treatments:
treat.stand <- 4000000
#Fires:
fire.stand <- 8000000
#-----------------------------------------------------------------------------------
#>>>>>>>>>>>>>>>>>>>          ASCII MAP FILE METADATA...
#The number of acres per pixel.
MapRes <- 0.22239
#Number of rows and columns in ascii map files.
rows <- 1771
cols <- 3491
#Number of rows with metadata for each ascii map file.
fh.adj <- 6  #fuelbed map (f.map)
sh.adj <- 6  #stand map (s.map)
bh.adj <- 6  #burn unit map (b.map)
lh.adj <- 6  #coordinate map (l.map)
#>>>>>>>>>>>>>>>>>>>          FOREST MANAGEMENT PARAMTERS...
#Vector of burn unit numbers (corresponds with b.map) that are within Eglin but
#unmanaged.
Unmanaged.Unit <- 9999
#Vector of burn unit numbers (corresponds with b.map) that are within the buffer
#perimeter.
Buffer.Unit <- 8888
#Vector of burn unit numbers (corresponds with b.map) that are outside of the
#Eglin perimeter.
NoData.Unit <- -9999999
#Number of start/ignition points. Select the proportion of available cells within a
#treatment unit to locate seed cells (i.e. start point locations that are fed into
#the cellilar automata sub-model.
#Element 1 -- Thinning
#Element 1 -- Herbicide Application
#Element 1 -- Prescribed Fire
seed.cells <- c(0.50, 0.50, 0.10)
#>>>>>>>>>>>>>>>>>>>          FUELBED PARAMTERS...
#Vector of fuelbed numbers (corresponds with f.map) with a fixed age at zero.
Fixed.Age <- c(-9999, 1061401, 1069000, 1071401, 5079000, 5089000, 5099000, 6000000)
#Open Water fuelbed
Open.Water <- 6000000
#Vector of fuelbed numbers (corresponds with f.map) that are non-burnable.
Non.Flammable <- c(-9999, 5089000, 5099000, 6000000)
#Key to fuelbeds in two objects above
#-9999    No Data
#1061401  Shrub swamp
#1069000  Cleared wetland
#1071401  Herbaceous marsh
#5079000  Rangeland
#5089000  Agriculture
#5099000  Developed
#6000000  Open water
#>>>>>>>>>>>>>>>>>>>          FIRE BEHAVIOR PARAMTERS...
#Do not map wildfires below this value (in acres). Purpose is to reduce model run
#time by excluding small fires that do not impact vegetation at the landscape scale.
fire.cut <- 10
#Ceilings for forest management and wildfire disturbances
#-----------------------------------------------------------------------------
#Maximum annual area burned in wildfires
#Element 1 -- Eglin Air Force Base
#Element 2 -- 10-km buffer landscape
Truncate.AAB <- c(50000, 25000)
#Maximum fire size of wildfires
#Element 1 -- Eglin Air Force Base
#Element 2 -- 10-km buffer landscape
Truncate.Area <- c(12000, 6000)
#Maximum number of fires and treatments in a given year
#Element 1 -- Eglin Air Force Base
#Element 2 -- 10-km buffer landscape
#Element 3 -- Thnning Treatment (Corresponds with THINNING)
#Element 4 -- Herbicide Application (Corresponds with HERBICIDE)
#Element 5 -- Prescribed Fire (Corresponds with RX_FIRE)
Truncate.Number <- c(400, 800, 50, 50, 500)
#-----------------------------------------------------------------------------
#These two parameters will cause flammability of fuels to slowly equilibrate
#as annual area burned increases. For these values (c.shape = 1.5 and
#s.scale = 0.1) equlibration begins when area burned for a fire in the unmanaged
#unit (management unit = 9999) or buffer zone (management unit = 8888)
#almost immediately as fire size grows and all but unburnable fuels equilibrate to
#1 by the time fire size equals 1100 acres (5000 pixels).
#When wildfires are burned by the block and burn method flammability of fuels is
#based on probability. The meaning of the scale.factor and dist.curve are flipped
#and corresponding values are randomly selected from each dataset
c.shape <- 1.5
c.scale <- 0.1
#Values to guide stochastic generation of treatments. Order is thinning, herbicide, and
#prescribed fire.
minSize <- c(5, 20, 1)#minimum treated stand size within a treatment unit
#Shape parameters are used to inform the beta distribution function that determines
#The percentage of a treatment unit to be effected for each treatment.
shape1 <- c(30, 30, 10)#shape 1 parameter
shape2 <- c(5,5, 2.5)#shape 2 parameter
#Flame extinction variable in wildfire loop (loop 10). After cell has burned
#for the specified number of expansion it burns out.
burn.out <- 3
#Size threshold where fires are primarily wind driven.
#Testing, 10,000 acres was my original limit. It seems to high.
windThresholdSize <- 1000#acres
#>>>>>>>>>>>>>>>>>>>          WIND DATA PARAMTERS...
#Describe probability of wind coming from a given direction.
#0 = North
#1 = Northeast
#2 = East
#3 = Southeast
#4 = South
#5 = SouthWest
#6 = West
#7 = Northwest
windProbs <- c(0.1,0.025,0.01,0.01,0.025,0.05,0.16,0.62)
#>>>>>>>>>>>>>>>>>>>          FINISHED
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
####################################################################################
####################################################################################
#STEP 01: Administrative Information
# Reads mutable parameters from AWS user data
try(host_sim_params <- read.table("host_sim_params.txt"), silent=TRUE)
host_sim_params <- read.csv("host_sim_params.txt")
if (exists("host_sim_params") && "run_id" %in% colnames(host_sim_params)) {
# from AWS user data
run <- host_sim_params$run_id
} else if (exists("RUN")) {
# manual
run <- RUN
} else {
stop("No run id present.")
}
if (exists("host_sim_params") && "seed" %in% colnames(host_sim_params)) {
# from AWS user data
set.seed(host_sim_params$seed)
} else if (exists("SEED")) {
# manual
set.seed(SEED)
} else {
set.seed(NULL)
seed <- runif(1)*2e9
cat("Random seed used: ", seed, file=paste(run, "_dump.txt"))
set.seed(seed)  # replace seed with manual seed if desired
}
if (exists("host_sim_params") && "rx_fire" %in% colnames(host_sim_params)) {
# from AWS user data
RX_FIRE <- host_sim_params$rx_fire
}
if (exists("host_sim_params") && "use_gpu" %in% colnames(host_sim_params)) {
# from AWS user data
USE_GPU <- host_sim_params$use_gpu
} else if (exists("USE_GPU")) {
# manual, no need to do anything
} else {
USE_GPU <- FALSE
}
# TODO bernease: Pull INSTALL_PACKAGES variable from host_sim_params, similar to use_gpu
if (exists("host_sim_params") && "input_path" %in% colnames(host_sim_params)) {
# from AWS user data
input_path <- host_sim_params$input_path
}
if (exists("host_sim_params") && "output_path" %in% colnames(host_sim_params)) {
# from AWS user data
output_path <- host_sim_params$output_path
}
#Set working directory if running FDM manually
if (exists("host_sim_params"))
{
# AWS, no need to set working directory
} else
{
# manually running FDM, set working directory
setwd(input_path)
}
#>>>>>>>>>>>>>>>>>>>          R PACKAGES...
#Manage packages.
if(INSTALL_PACKAGES == TRUE)
{
#Install packages
install.packages("Hmisc", repos="http://cran.fhcrc.org/")
install.packages("GenKern", repos="http://cran.fhcrc.org/")
install.packages("SDMTools", repos="http://cran.fhcrc.org/")
install.packages("gtools", repos="http://cran.fhcrc.org/")
#Open libraries
library(Hmisc) #for summarize()
library(GenKern)#for nearest()
library(SDMTools)
library(gtools)  #for combinations()ge
library(utils)#for Rprof()
if(USE_GPU == T)
{
#Install GPU package
install.packages("gmatrix", repos="http://cran.fhcrc.org/")
#Open GPU library
library(gmatrix)#GPU package, will only work on a Linux machine
} else
{
#nothing
}
} else
{
#Open libraries
library(Hmisc) #for summarize()
library(GenKern)#for nearest()
library(SDMTools)
library(gtools)  #for combinations()ge
library(utils)#for Rprof()
if(USE_GPU == T)
{
#Open GPU library
library(gmatrix)#GPU package, will only work on a Linux machine
} else
{
#nothing
}
}
####################################################################################
####################################################################################
#STEP 02: Operational Parameters
#Stop model run if map production interval is greater than the number of model years.
if (Interval > YEARS) {
stop("Interval too high. Make interval less than year variable.")
quit()
}
#Average annual area treated for thinning, herbicide, and prescribed fire.
#Read in third meanTAP parameter from file
if (exists("RX_FIRE")) {
# manual
meanTAP <- c(THINNING, HERBICIDE, RX_FIRE)
} else if (exists("host_sim_params") && "rxfire" %in% host_sim_params) {
# from AWS
meanTAP <- c(THINNING, HERBICIDE, host_sim_params$rxfire)
} else {
stop("No rxfire parameter found.")
}
#Convert area in acres to 30 m pixels
meanTAP <- round(meanTAP/MapRes,0)
####################################################################################
####################################################################################
#STEP 03: Import Spatial Database (Raster Subset)
f.map <- matrix(scan(paste("inputs/sef_fmap_v2_",rows,"x",cols,".txt",
sep = ""),skip = fh.adj),ncol=cols,byrow=T)#16
s.map <- matrix(scan(paste("inputs/sef_smap_092715_",rows,"x",cols,".txt",
sep = ""),skip = sh.adj),ncol=cols,byrow=T)#17
b.map <- matrix(scan(paste("inputs/sef_bmap_",rows,"x",cols,".txt",
sep = ""),skip = bh.adj),ncol=cols,byrow=T)#18
l.map <- matrix(scan(paste("inputs/sef_lmap_",rows,"x",cols,".txt",
sep = ""),skip = lh.adj),ncol=cols,byrow=T)#20
####################################################################################
####################################################################################
#STEP 04: Import Spatial Database (Pseudo-vector Subset)
Stand.List <- read.table(paste(
"inputs/sef_StandList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Stand.List <- as.vector(Stand.List[,2], mode = "numeric")#20
Stand.List <- Stand.List[-1]
Fuelbed.List <- read.table(paste(
"inputs/sef_FuelbedList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Fuelbed.List <- as.vector(Fuelbed.List[,2], mode = "numeric")#21
Fuelbed.List <- Fuelbed.List[-1]
Coord.List <- read.table(paste(
"inputs/sef_CoordList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Coord.List <- as.vector(Coord.List[,2], mode = "numeric")#21
Coord.List <- Coord.List[-1]
Age.List <- read.table(paste(
"inputs/sef_AgeList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Age.List <- as.vector(Age.List[,2], mode = "numeric")#22
Age.List <- Age.List[-1]
Area.List <- read.table(paste(
"inputs/sef_AreaList_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
Area.List <- as.vector(Area.List[,2], mode = "numeric")#23
Area.List <- Area.List[-1]
mfri.List <- read.table(paste(
"inputs/sef_mfriList_v2_",rows,"x",cols,".txt",
sep = ""), header=TRUE,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
mfri.List <- as.vector(mfri.List[,2], mode = "numeric")#23
mfri.List <- mfri.List[-1]
mfri.Matrix <- read.table(paste(
"inputs/sef_mfriMatrix_v2_",rows,"x",cols,".txt",
sep = ""), header=T,
sep=",", na.strings="NA", dec=".", strip.white=TRUE)
