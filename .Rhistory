} else
{
osno_surface <- vector()
osno_all <- osno_surface
v.neef_surface <- vector()
}
#CROWN FIRE>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if(length(osnd_crown) > 0)
{
#Show fuelbeds associated with stands affected by fire
fb_f12_crown <- Fuelbed.List[Stand.List %in% osnd_crown]
#List corresponding stand numbers.
osno_crown <- Stand.List[Stand.List %in% osnd_crown]
#Expand fuelbeds to include each occurence of stand number in osnd
effb_crown <- fb_f12_crown[match(osnd_crown, osno_crown)]
#Crown Fire
#Calculate number of new stands
noef_crown <- length(osno_crown)
#Determine new stand numbers for treatment[b], block[cc].
if(noef_crown == 0)
{
neef_crown <- 0
} else
{
neef_crown <- seq(ifelse(length(neef_surface) == 0, mudn, max(neef_surface) + 1),
(ifelse(length(neef_surface) == 0, mudn + noef_crown, max(neef_surface) + noef_crown)), 1)
}
#Map new stands
odc <- data.frame(ocod_crown, osnd_crown)
odc <- odc[order(odc$ocod_crown),]
v.neef_crown <- neef_crown[match(odc$osnd_crown, osno_crown)]
s.map[l.map %in% odc$ocod_crown] <- v.neef_crown
#
osno_all <- c(osno_all, osno_crown)
} else
{
osno_crown <- vector()
osno_all <- c(osno_all, osno_crown)
v.neef_crown <- vector()
}
if(sum(neef_surface,neef_crown) == 0)
{
loopF.NewStand <- loopF.NewStand
loopF.Area <- loopF.Area
} else
{
loopF.NewStand <- c(loopF.NewStand,neef_surface, neef_crown)
l.neef <- rep(1,length(v.neef_surface) + length(v.neef_crown))
s.neef_a <- summarize(l.neef, c(v.neef_surface, v.neef_crown), sum)
s.neef <- as.vector(s.neef_a[,2])
loopF.Area <- c(loopF.Area, s.neef)
}
loopF.ReplacedStand <- c(loopF.ReplacedStand, osno_all)
loopF.E_no <- c(loopF.E_no, rep(e, length(osno_all)))
loopF.F_no <- c(loopF.F_no, rep(f, length(osno_all)))
loopF.G_H_no <- c(loopF.G_H_no, rep(length(expansions_loop8), length(osno_all)))
loopF.fireType <- c(loopF.fireType,
c(rep(1, length(osno_surface)), rep(2, length(osno_crown))))
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                 #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                #
if(length(unique(loopF.NewStand)) != length(loopF.NewStand) |
length(loopF.ReplacedStand) != length(loopF.NewStand) |
length(v.neef_surface) + length(v.neef_crown) != length(s.map[l.map %in% c(ocod_surface,ocod_crown)]))
{
r101 <- 2
break
} else
{
r101 <- ifelse(any(s.map < 0 & s.map > -9999),22,0)
}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
if(length(s.map[s.map < 0 & s.map > -9999]) > 0)
{
aaa <- data.frame(B = loopB.new_stand, F = loopF.NewStand)
} else
{
f <- f
}
#TEMPOARY -- FORCES FDM TO CRASH IF -1 IS ASSSIGNED TO S.MAP
} else #9.4.1 ----------------------------------------------------------------------
{ #9.4.2 ---------------------------------------------------------------------------
} #9.4.2 ---------------------------------------------------------------------------
} else #9.3.1 ----------------------------------------------------------------------
{ #9.3.2 ---------------------------------------------------------------------------
r101 <- 8
break
} #9.3.2 ---------------------------------------------------------------------------
} else #9.1.1 ----------------------------------------------------------------------
{ #9.1.2 ---------------------------------------------------------------------------
break
} #9.1.2 ---------------------------------------------------------------------------
##############################################################################
##############################################################################
##############################################################################
} #9.0.0 ---------------------------------------------------------------------------
#Log new stand numbers and associated disturbances when they have been added to
#s.map.
loopE.NewStand <- c(loopE.NewStand,loopF.NewStand)
loopE.Area <- c(loopE.Area,loopF.Area)
loopE.ReplacedStand <- c(loopE.ReplacedStand,loopF.ReplacedStand)
loopE.E_no <- c(loopE.E_no, loopF.E_no)
loopE.F_no <- c(loopE.F_no, loopF.F_no)
loopE.G_H_no <- c(loopE.G_H_no, loopF.G_H_no)
loopE.fireType <- c(loopE.fireType, loopF.fireType)
loopE <- data.frame(NewStand = loopE.NewStand,
ReplacedStand = loopE.ReplacedStand,
Area = loopE.Area,
Fire = loopE.fireType,
E_no = loopE.E_no,
F_no = loopE.F_no,
G_H_no = loopE.G_H_no)
loopE <- loopE[order(loopE$ReplacedStand),]
} else #8.1.1 ----------------------------------------------------------------------
{ #8.1.2 ---------------------------------------------------------------------------
#Log new stand numbers and associated disturbance when they have been added to
#s.map.
loopE.NewStand <- c(loopE.NewStand,loopF.NewStand)
loopE.Area <- c(loopE.Area,loopF.Area)
loopE.ReplacedStand <- c(loopE.ReplacedStand,loopF.ReplacedStand)
loopE.E_no <- c(loopE.E_no, loopF.E_no)
loopE.F_no <- c(loopE.F_no, loopF.F_no)
loopE.G_H_no <- c(loopE.G_H_no, loopF.G_H_no)
loopE.fireType <- c(loopE.fireType, loopF.fireType)
loopE <- data.frame(NewStand = loopE.NewStand,
ReplacedStand = loopE.ReplacedStand,
Area = loopE.Area,
Fire = loopE.fireType,
E_no = loopE.E_no,
F_no = loopE.F_no,
G_H_no = loopE.G_H_no)
loopE <- loopE[order(loopE$ReplacedStand),]
break.message <- "No Flammable Fuel"
} #8.1.2 ---------------------------------------------------------------------------
#Print out run status
run_status(row.code, t.code, a, b, cc, e, f, tdn, tdy, tdc)
##############################################################################
##############################################################################
##############################################################################
#ONLY TO DIAGNOSE ERRORS FROM MODEL RUN 101                                  #
#DRAG ON TIME, REMOVE AFTER ERRORS DIAGNOSED                                 #
if(r101 > 0)                                                                 #
{                                                                            #
r101 <- r101
break
} else                                                                       #
{                                                                            #
r101 <- r101
}                                                                            #
#                                                                            #
} #8.0.0 ------------------------------------------------------------------#
}                                                                            #
#
if(r101 > 0)                                                                 #
{                                                                            #
r101 <- r101
break
} else                                                                       #
{                                                                            #
r101 <- r101
}                                                                            #
##############################################################################
##############################################################################
##############################################################################
length(loopE.NewStand) > 0
fl <- Fuelbed.List
sl <- Stand.List
fm <- f.map
sm <- s.map
#Code below replaces loop, vene though there are more lines it should run way faster.
loopE_crownFire <- loopE[loopE$Fire == 2,]
#Object shows fuelbeds associated with each new stand number created by
#disturbances in year[a].
FB_burned.by.crownFire_1 <- Fuelbed.List[Stand.List %in% loopE_crownFire$ReplacedStand]
SN_burned.by.crownFire_1 <- Stand.List[Stand.List %in% loopE_crownFire$ReplacedStand]
FB_burned.by.crownFire_2 <- FB_burned.by.crownFire_1[match(loopE_crownFire$ReplacedStand,
SN_burned.by.crownFire_1)]
#Add SN_burned.by.crownFire_2 to loopE_crownFire data frame
loopE_crownFire <- data.frame(loopE_crownFire, AffectedFuelbed = FB_burned.by.crownFire_2)
#Sort data frame by new stands
loopE_crownFire <- loopE_crownFire[order(loopE_crownFire$NewStand),]#probably unecessary
#seperate out new stands from s.map, lists occurrences of new stands from min to max coords.
crownFire_standsXpixel <- s.map[s.map %in% loopE_crownFire$NewStand]
#List of row numbers in fuelbed lookup table where fuelbeds need to be updated based on treatment
burned.fuelbeds.positions <- which(fuelbed_lut$fuelbed %in% loopE_crownFire$AffectedFuelbed)
#Fuelbeds that may be updated corresponding with row numbers in burned.fuelbeds.positions
fuelbeds.burned.in.crownFire <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% FB_burned.by.crownFire_2]
#row numbers in fuelbed lookup table corresponding with each existing fuelbed in each new stand
burned.fuelbed.positionsXpixel <- burned.fuelbeds.positions[match(loopE_crownFire$AffectedFuelbed,
fuelbeds.burned.in.crownFire)]
#Activate when you can differentiate between crown fire and surface fire
crownFire_regen <- fuelbed_lut$crown_fire[burned.fuelbed.positionsXpixel]
#Lists occurrences of new fuelbeds from min to max coords.
crownFire_regenXpixel <- crownFire_regen[match(crownFire_standsXpixel, loopE_crownFire$NewStand)]
#Replace old fuelbeds with new ones in f.map
f.map[s.map %in% loopE_crownFire$NewStand] <- crownFire_regenXpixel
#Re-order loopE data frame by old stands because that is the order of ages in crownFire_newAge_1.
loopE_crownFire <- loopE_crownFire[order(loopE_crownFire$ReplacedStand),]
#List ages associated with each stand that has been affected by crown fire
#These will be used to update Age.List
crownFire_oldAge_1 <- Age.List[Stand.List %in% loopE_crownFire$ReplacedStand]
crownFire_oldAge_2 <- crownFire_oldAge_1[match(loopE_crownFire$ReplacedStand, SN_burned.by.crownFire_1)]
#List new age for crown fire stands
crownFire_newAge <- rep(0, length(crownFire_oldAge_2))
#Add crownFire_newAge_2 to loopE data.frame
loopE_crownFire <- data.frame(loopE_crownFire, oldAge = crownFire_oldAge_2)
#Re-order loopE data frame by new stands.
loopE_crownFire <- loopE_crownFire[order(loopE_crownFire$NewStand),]
#Add crownFire_regen to loopE data.frame
loopE_crownFire <- data.frame(loopE_crownFire, newFuelbed = crownFire_regen)
#Add crownFire_newAge_2 to loopE data.frame
loopE_crownFire <- data.frame(loopE_crownFire, newAge = crownFire_newAge)
#List stands that have been altered by disturbances.
ss2 <- loopE.ReplacedStand
standd <- sort(unique(ss2))#there can be duplicates, this will mess up the shortcut in a9
sb <- summarize(loopE.Area,ss2,sum)#sum areas for duplicates.
saread <- as.vector(sb[,2])
smud <- mapply(function(y) MU.List[Stand.List == y], loopE.ReplacedStand)
#Isolate stands affected by surface fire
loopE_surfaceFire <- loopE[loopE$Fire == 1,]
loopE_surfaceFire <- loopE_surfaceFire[order(loopE_surfaceFire$NewStand),]#probably unecessary
#Add fuelbed and age info (needed to update .List objects)
StandNumber_surfaceFire_1 <- Stand.List[Stand.List %in% loopE_surfaceFire$ReplacedStand]
Fuelbed_surfaceFire_1 <- Fuelbed.List[Stand.List %in% loopE_surfaceFire$ReplacedStand]
Fuelbed_surfaceFire_2 <- Fuelbed_surfaceFire_1[match(loopE_surfaceFire$ReplacedStand,
StandNumber_surfaceFire_1)]
Age_surfaceFire_1 <- Age.List[Stand.List %in% loopE_surfaceFire$ReplacedStand]
Age_surfaceFire_2 <- Age_surfaceFire_1[match(loopE_surfaceFire$ReplacedStand,
StandNumber_surfaceFire_1)]
#Create new data frame. At this point new fuelbeds and new ages are old, these are
#just placeholders until further down this loop when surface fire impacts are assessed
#using mFRI.
loopE_surfaceFire <- data.frame(loopE_surfaceFire,
AffectedFuelbed = Fuelbed_surfaceFire_2,
oldAge = Age_surfaceFire_2, newFuelbed = Fuelbed_surfaceFire_2,
newAge = Age_surfaceFire_2)
#Combine surface fire and crown fire tables
loopE_allFire <- rbind(loopE_surfaceFire, loopE_crownFire)
loopE_allFire <- loopE_allFire[order(loopE_allFire$NewStand),]
#Shelve fire history for stands that have been impacted by disturbance
new_mfri_vec <- mapply(function(y) mfri.Matrix[Stand.List == y,], loopE_allFire$ReplacedStand)
nmvd <- t(new_mfri_vec)
#Add a fire for stands that were burned in wildfires
nmvd[,30] <- 1
#Change stand properties as needed for treatments.
#Subtract area of new stands from corresponding old stands
Area.List[Stand.List %in% standd] <- Area.List[Stand.List %in% standd] - saread
#Update list to remove any stands that have been overwritten.
Stand.List <- Stand.List[(Area.List == 0) == F]
Fuelbed.List <- Fuelbed.List[(Area.List == 0) == F]
Age.List <- Age.List[(Area.List == 0) == F]
Coord.List <- Coord.List[(Area.List == 0) == F]
MU.List <- MU.List[(Area.List == 0) == F]
mfri.Matrix <- mfri.Matrix[(Area.List == 0) == F,]
mfri_lower.List <- mfri_lower.List[(Area.List == 0) == F]
mfri_upper.List <- mfri_upper.List[(Area.List == 0) == F]
Area.List <- Area.List[(Area.List == 0) == F]
#Update list to add new stands.
Stand.List <- c(Stand.List, loopE_allFire$NewStand)
Fuelbed.List <- c(Fuelbed.List, loopE_allFire$newFuelbed)
Age.List <- c(Age.List, loopE_allFire$newAge)
#List new stand occurrences in s.map
vs.map_a20 <- s.map[s.map %in% loopE.NewStand]
#List corresponding coordinates (l.map) for new stand occurrences in s.map
vl.map_a20 <- l.map[s.map %in% loopE.NewStand]
#Use summarize function (w/ min()) to select a single coordinate value for each new stand.
v.Coord_a20a <- summarize(vl.map_a20,vs.map_a20,min)
#Subset coordinates
v.Coord_a20b <- as.vector(v.Coord_a20a[,2])
#Update
Coord.List <- c(Coord.List,v.Coord_a20b)
MU.List <- c(MU.List, smud)
mfri.Matrix <- rbind(mfri.Matrix,nmvd)
mfri.List <- apply(mfri.Matrix,1,sum)
mfri.List <- round(30/mfri.List,0)
mfri.List <- ifelse(mfri.List == Inf, 32, mfri.List)
#Update
mfri_lower.List <- c(mfri_lower.List,
fuelbed_lut$mfri_shortens[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)])
#Select option 1 for fuelbed transition when mfri lengthens
mfri_lengthens_1 <- fuelbed_lut$mfri_lengthens_1[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)]
#Select option 2 for fuelbed transition when mfri lengthens
mfri_lengthens_2 <- fuelbed_lut$mfri_lengthens_2[match(loopE_allFire$newFuelbed,
fuelbed_lut$fuelbed)]
#Randomly choose between option 1 and 2 for each fuelebd.
mfri_lengthens <- apply(matrix(data = c(mfri_lengthens_1,
mfri_lengthens_2),length(mfri_lengthens_1), 2),
1, sample, size = 1)
#Update
mfri_upper.List <- c(mfri_upper.List, mfri_lengthens)
#Update
Area.List <- c(Area.List,loopE.Area)
#order .List objects by stand number
Fuelbed.List <- Fuelbed.List[order(Stand.List)]
MU.List <- MU.List[order(Stand.List)]
Area.List <- Area.List[order(Stand.List)]
mfri.Matrix <- mfri.Matrix[order(Stand.List),]
Age.List <- Age.List[order(Stand.List)]
mfri_lower.List <- mfri_lower.List[order(Stand.List)]
mfri_upper.List <- mfri_upper.List[order(Stand.List)]
Stand.List <- sort(Stand.List)
Fuelbed.List[Stand.List == 800028641]
Fuelbed.List[Stand.List == 800028642]
Fuelbed.List[Stand.List == 800028647]
f.map[s.map == 800028641]
f.map[s.map == 800028642]
f.map[s.map == 800028647]
replaced.stands.in.tslt <- loopE_allFire$ReplacedStand[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]},
loopE_allFire$newFuelbed) %in% c(2,3,4,6,7,8)]
trouble.stands <- c(800028641,800028642,800028647)
length(replaced.stands.in.tslt[replaced.stands.in.tslt %in% trouble.stands])
length(loopE_allFire[,1])
head(loopE_allFire)
loopE_allFire[loopE_allFire$ReplacedStand %in% trouble.stands,]
trouble.stands
loopE_allFire[loopE_allFire$NewStand %in% trouble.stands,]
tslt.List <- c(tslt.List, tslt.List[match(replaced.stands.in.tslt, tslt.Stands)])
tslt.Stands <- c(tslt.Stands, loopE_allFire$NewStand[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$newFuelbed) %in% c(2,3,4,6,7,8)])
tslt.Fuelbeds <- c(tslt.Fuelbeds, loopE_allFire$newFuelbed[mapply(function(y)
{as.numeric(strsplit(as.character(y), "")[[1]])[4]}
, loopE_allFire$newFuelbed) %in% c(2,3,4,6,7,8)])
#Remove stands from .tslt objects that have been overwritten
tslt.List <- tslt.List[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Fuelbeds <- tslt.Fuelbeds[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.Stands <- tslt.Stands[!(is.na(match(tslt.Stands, Stand.List[Stand.List %in% tslt.Stands])))]
tslt.All <- data.frame(stand = tslt.Stands, fuelbed = tslt.Fuelbeds, Years = tslt.Years)
head(tslt.All)
tslt.All <- data.frame(stand = tslt.Stands, fuelbed = tslt.Fuelbeds, Years = tslt.List)
head(tslt.All)
tslt.All[Tslt.All$stand %in% trouble.stands]
tslt.All[Tslt.All$stand %in% trouble.stands,]
tslt.All[tslt.All$stand %in% trouble.stands,]
#Show max time-since-last-treatment before state transitions for each fuelbed
max_tslt <- fuelbed_lut$max_tslt[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#List each of the fuelbeds corresponding with tslt object above
max_tslt_fb <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% tslt.Fuelbeds]
#Expand to the max tslt object for each row in tslt.List
max_tslt_x_stand <- max_tslt[match(tslt.Fuelbeds, max_tslt_fb)]
#Crash model is Fuelbed.List turned into a list()
if(length(max_tslt_x_stand) != length(tslt.List) | length(tslt.List[is.na(tslt.List) == T]) > 0)
{
r101 <- "inconcistency in tslt tracking"
break
} else
{
r101 <- r101
}
#List stand numbers for stands that will transition.
replace_stands <- tslt.Stands[tslt.List > max_tslt_x_stand]
#List fuelbeds of stands that will transition.
replace_fbs <- tslt.Fuelbeds[tslt.List > max_tslt_x_stand]
#List unique current fuelbeds for stands that will transition.
old_fbs <- fuelbed_lut$fuelbed[fuelbed_lut$fuelbed %in% replace_fbs]
#List unique new fuelbeds for stands that will transition.
new_fbs <- fuelbed_lut$post_1[fuelbed_lut$fuelbed %in% replace_fbs]
#Skip update if there are no fuelbeds that will transition
if(length(new_fbs) == 0)
{#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>FALSE
#Order tslt objects by stand number before you apply it to .List objects
tslt.List <- tslt.List[order(tslt.Stands)]
tslt.Fuelbeds <- tslt.Fuelbeds[order(tslt.Stands)]
tslt.Stands <- sort(tslt.Stands)
} else#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>FALSE
{#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>TRUE
#List unique new lower mFRI limit fuelbeds for stands that will transition.
#If not specified as a vector this object will become a list when there are
#no new fuelbeds to update and FDM will crash.
new_lower <- vector()
new_lower <- mapply(function(y)
{
fuelbed_lut$mfri_shortens[fuelbed_lut$fuelbed == y]
},
new_fbs)
#List unique new upper mFRI limit fuelbeds for stands that will transition.
new_upper_1 <- vector()
new_upper_1 <- mapply(function(y)
{
fuelbed_lut$mfri_lengthens_1[fuelbed_lut$fuelbed == y]
},
new_fbs)
new_upper_2 <- vector()
new_upper_2 <- mapply(function(y)
{
fuelbed_lut$mfri_lengthens_2[fuelbed_lut$fuelbed == y]
},
new_fbs)
#Expand new unique fuelbeds to the number of stands that will transition.
new_fbs_x_stand <- new_fbs[match(replace_fbs, old_fbs)]
new_lower_x_stand <- new_lower[match(replace_fbs, old_fbs)]
new_upper_1_x_stand <- new_upper_1[match(replace_fbs, old_fbs)]
new_upper_2_x_stand <- new_upper_2[match(replace_fbs, old_fbs)]
new_upper_x_stand <- apply(matrix(data = c(new_upper_1_x_stand, new_upper_2_x_stand),
length(new_upper_1_x_stand), 2), 1, sample,
size = 1)
#Replace current fuelbeds with new ones in cases where tslt exceeds limit for
#state.
tslt.Fuelbeds[tslt.Stands %in% replace_stands] <- new_fbs_x_stand
#Order tslt objects by stand number before you apply it to .List objects
tslt.List <- tslt.List[order(tslt.Stands)]
tslt.Fuelbeds <- tslt.Fuelbeds[order(tslt.Stands)]
tslt.Stands <- sort(tslt.Stands)
#Apply changes to f.map and Fuelbed.List
vt.map <- s.map[s.map %in% tslt.Stands]
v.tslt <- tslt.Fuelbeds[match(vt.map, tslt.Stands)]
f.map[s.map %in% tslt.Stands] <- v.tslt
Fuelbed.List[Stand.List %in% replace_stands] <- new_fbs_x_stand
mfri_lower.List[Stand.List %in% replace_stands] <- new_lower_x_stand
mfri_upper.List[Stand.List %in% replace_stands] <- new_upper_x_stand
}#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>TRUE
f.map[s.map == 800028647]
f.map[s.map == 800028642]
f.map[s.map == 800028641]
Fuelbed.List[Stand.List == 800028647]
Fuelbed.List[Stand.List == 800028642]
Fuelbed.List[Stand.List == 800028641]
length(new_fbs_x_stand)
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = Fuelbed.List[Stand.List %in% replace_stands], purported_stand = replace_stands, new_fb = new_fbs_x_stand)
head(test_fb)
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = fl.List[Stand.List %in% replace_stands], purported_stand = replace_stands, new_fb = new_fbs_x_stand)
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = fl[Stand.List %in% replace_stands], purported_stand = replace_stands, new_fb = new_fbs_x_stand)
head(test_fb)
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = fl[Stand.List %in% replace_stands], purported_stand = replace_stands, old_fb = replace_fbs, new_fb = new_fbs_x_stand)
head(test_fb)
fl[Stand.List == 1856301]
f.map[s.map == 1856301]
fm[s.map == 1856301]
Fuelbed.List[Stand.List == 1856301]
Fuelbed.List[Stand.List == 1907801]
fl[sl == 1907801]
fm[sm == 1907801]
f.map[s.map == 1907801]
length(fl)
length(Fuelbed.List)
fl_safe <- Fuelbed.List
Fuelbed.List <- fl
length(Fuelbed.List)
Fuelbed.List <- Fuelbed.List[(Area.List == 0) == F]
Fuelbed.List <- c(Fuelbed.List, loopE_allFire$newFuelbed)
Fuelbed.List <- Fuelbed.List[order(Stand.List)]
length(Fuelbed.List)
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = Fuelbed.List[Stand.List %in% replace_stands], purported_stand = replace_stands, old_fb = replace_fbs, new_fb = new_fbs_x_stand)
head(test_fb)
rem(test_fb)
rm(test_fb)
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = Fuelbed.List[Stand.List %in% replace_stands], purported_stand = replace_stands, old_fb = replace_fbs, new_fb = new_fbs_x_stand)
head(test_fb)
Fuelbed.List[Stand.List == 1907801]
tslt.All[tslt.All$stand == 1907801]
tslt.All[tslt.All$stand == 1907801,]
Fuelbed.List <- fl
Fuelbed.List[Stand.List == 1907801]
head(test_fb)
fl[sl == 1907801]
length(fl)
length(sl)
length(Fuelbed.List)
length(Stand.List)
Fuelbed.List <- fl_safe
length(Fuelbed.List)
Fuelbed.List[Stand.List == 1907801]
test_fb <- data.frame(stand = sl[sl %in% replace_stands], fb = fl[sl %in% replace_stands], purported_stand = replace_stands, old_fb = replace_fbs, new_fb = new_fbs_x_stand)
length(sl)
length(fl)
Stand.List <- sl
Fuelbed.List <- fl
length(Area.List[Area.List == 0])
length(Stand.List)
length(Fuelbed.List)
Stand.List <- c(Stand.List, loopE_allFire$NewStand)
Fuelbed.List <- c(Fuelbed.List, loopE_allFire$newFuelbed)
Fuelbed.List <- Fuelbed.List[order(Stand.List)]
Stand.List <- sort(Stand.List)
length(Stand.List)
Stand.List <- Stand.List[Stand.List %in% sort(unique(as.vector(s.map)))]
length(Stand.List)
Fuelbed.List <- Fuelbed.List[Stand.List %in% sort(unique(as.vector(s.map)))]
length(Fuelbed.List)
Stand.List <- sl
Fuelbed.List <- fl
length(Stand.List)
length(Fuelbed.List)
Fuelbed.List <- Fuelbed.List[Stand.List %in% sort(unique(as.vector(s.map)))]
Stand.List <- Stand.List[Stand.List %in% sort(unique(as.vector(s.map)))]
Stand.List <- c(Stand.List, loopE_allFire$NewStand)
Fuelbed.List <- c(Fuelbed.List, loopE_allFire$newFuelbed)
length(Stand.List)
length(Fuelbed.List)
Fuelbed.List <- Fuelbed.List[order(Stand.List)]
Stand.List <- sort(Stand.List)
fl[sl == 1907801]
Fuelbed.List[Stand.List == 1907801]
test_fb <- data.frame(stand = Stand.List[Stand.List %in% replace_stands], fb = Fuelbed.List[Stand.List %in% replace_stands], purported_stand = replace_stands, old_fb = replace_fbs, new_fb = new_fbs_x_stand)
head(test_fb)
test_fb[test_fb$stand %in% trouble.stands,]
range(Stand.List[Stand.List %in% replace_stands] - sort(Stand.List[Stand.List %in% replace_stands]))
range(replace_stands - sort(replace_stands))
range(tslt.Stands - sort(tslt.Stands))
tslt.All[tslt.All$stand == 1907801,]
tslt.All[tslt.All$stand == trouble.stands[1],]
tslt.Fuelbeds[tslt.Stands == trouble.stands[1]]
tslt.Fuelbeds[tslt.Stands == trouble.stands[2]]
tslt.Fuelbeds[tslt.Stands == trouble.stands[3]]
length(replaced_stands)
length(replace_stands)
replace_stands
